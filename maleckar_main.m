%=======================================================
% Main module for the malekar model
% by JFRM
% Takes the dY value from the maleckarnorm.m code generated by COR
% Y: state variable vector
% Y = {V , n , m , h}
%
%  *   Usage:                                                                *
%  *   Settings can be stored in a structure and passed to the main function *
%  *   These settings include (among other things):                          *
%  *     - BCL                 (pacing cycle length in ms)                   *
%  *     - TSim                (duration of the simulation in milliseconds)  *
%  *     - NumStim             (number of APs to calculate)                  *
%  *     - storeLast           (the number of beats that will be stored)     *
%  *     - etc                                                               *
%  *                                                                         *
%  *   Example:                                                              *
%  *     settings.BCL = 1000; settings.TSim = 6000; settings.Amp_stim = -20; *
%  *     [StateVars, t] = maleckar_main(settings);                     *
%  *     plot(t, StateVars(:,25));                                           *
%  *                                                                         *
%  *   The program will return a complete overview of the state vector over  *
%  *   time and a list of the evaluated time points.                         *
%  *                                                                         *
%  *   This m-file depends on the following files:                           *
%
%=======================================================
function [StateVars, Ti, currents]=maleckar_main(settings, Const)
	settings = setDefaultSettings(settings);
	StateVars = [];
	Ti=[];
    
    
	x0 = getInitialVector(settings); 	% Initial conditions
    t_start = tic;
    h4 = waitbar(0,' Be patient, I am almost done ;-)');
    progress=0;
    t0 = clock;
	opts= odeset('RelTol',1e-3);
    for p=1:settings.NumStim
        %disp(['Calculating AP ', num2str(p), ' / ', num2str(settings.NumStim)]);
        [t,X]=ode15s('maleckarnorm',[0 settings.BCL],x0,opts,settings,p,Const);

        waitbar(p/settings.NumStim,h4)
        x0=[X(end,1:end)];
        
        if p > settings.NumStim - settings.storeLast
            Ti=[Ti; t+(settings.BCL*(p-1-(settings.NumStim - settings.storeLast)))];
            StateVars=[StateVars; X];
        end
    end
    
    ncurr = 9;
    currents = zeros(length(Ti),ncurr);
    for i=1:length(Ti)
        currents(i,:) = maleckarnorm(Ti(i), StateVars(i,:), 1, settings, 1, Const);
    end

    close(h4)
	t_elapsed = toc(t_start)
	
end

function Y0 = getInitialVector(data)
Y0 = [0.630471, 0.646226, 0.45453, 0.002665, 0.43071, 0.001098, 0.948202, 0.000014, 0.998578, 0.998561, 1.814418, 5.588239, 130.019282, 0.004661, 0.000054, 1.38222, 0.026604, 0.012843, 0.190077, 0.714719, 7.1e-5, 6.5e-5, 129.502075, 8.488527, -73.941851, 0.875262, 0.870692, 0.003325, 0.000371, 0.966869]; % Initial conditions commented in COR-generated code
end


function settings = setDefaultSettings(settings)
% in the future, the stimulation parameters will override those in the COR-generated code
	if ~isfield(settings, 'dt'), settings.dt = 0.01; end		% time step for forward euler method
%    if ~isfield(settings, 'TSim'), settings.TSim = 600; end		% duration of the simulation in milliseconds
	if ~isfield(settings, 'NumStim'), settings.NumStim= 10; end
    if ~isfield(settings, 'storeLast'), settings.storeLast = settings.NumStim; end
	if ~isfield(settings, 'StimOffset'), settings.StimOffset = 0; end		% offset of the first stimuls in milliseconds
    if ~isfield(settings, 'BCL'), settings.BCL = 800; end
	if ~isfield(settings, 'CI'), settings.CI = settings.BCL; end
    if ~isfield(settings, 'Amp_stim'), settings.Amp_stim = -52; end
    if ~isfield(settings, 'Dur_stim'), settings.Dur_stim = 1; end
    if ~isfield(settings, 'Amp_extra'), settings.Amp_extra = settings.Amp_stim; end
    if ~isfield(settings, 'Dur_extra'), settings.Dur_extra = settings.Dur_stim; end
    if ~isfield(settings, 'K_o'), settings.K_o = 5.4; end
    if ~isfield(settings, 'Na_o'), settings.Na_o = 130; end
    if ~isfield(settings, 'Ca_o'), settings.Ca_o = 1.8; end	
	
end

    



